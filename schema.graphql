"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type Query {
  hello: String!
  version: String!
  node(id: ID!): Node
  me: User
  externalSources(first: Int, after: String, last: Int, before: String): ExternalSourceConnection!
  search(query: String!): SearchResult!
  suggestString(queryString: String!): [String!]!
}

type Mutation {
  hello: String!
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type User {
  name: String
  emailAddress: EmailAddress!
  imageURL: URL
}

type ExternalSource implements Node {
  id: ID!
  name: String!
  description: String!
  url: URL!
}

type ExternalSourceEdge {
  cursor: String!
  node: ExternalSource
}

type ExternalSourceConnection {
  edges: [ExternalSourceEdge]
  pageInfo: PageInfo!
}

type Document implements Node {
  id: ID!
  name: String!
  description: String
  url: URL!
  externalSource: ExternalSource!
}

type DocumentEdge {
  cursor: String!
  node: Document
}

type DocumentConnection {
  edges: [DocumentEdge]
  pageInfo: PageInfo!
}

type SearchResult {
  documents(first: Int, after: String, last: Int, before: String): DocumentConnection!
}
